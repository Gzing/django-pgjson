django-pgjson documentation
===========================
Andrey Antukh, <niwi@niwi.be>
0.3.1, 2015-07-09

Experimental jsonb support by Charl P. Botha <cpbotha@vxlabs.com>

:toc:
:numbered:


Introduction
------------

_django-pgjson_ is a little library that add a bridge for PostgreSQL json field to Django.

Is a little brother of link:https://github.com/djangonauts/django-hstore[django-hstore]

Project Maturity
----------------

Since _django-pgjson_ is a young project there can be some API breakage.

Install
-------

This section covers a installing _django-pgjson_ and its requirements.

Requirements
~~~~~~~~~~~~

- Python 2.7 or 3.3+
- Django 1.6, 1.7 and 1.8
- psycopg2 2.5.0+
- PostgreSQL 9.2+


Supports
~~~~~~~~

- All json types. Including simple strings, floats, integers, booleans and null's.
- Works well with python serialization.
- Experimental: jsonb support in PostgreSQL >= 9.4


Limitations
~~~~~~~~~~~

- Only supports PostgreSQL >= 9.2
- PostgeSQL 9.4 is required for jsonb.
- No django admin support at this momment.
- Limited set of django 1.7 lookups (will be improved with postgresql 9.4)

Stable
~~~~~~

[source, bash]
----
pip install django-pgjson
----

Development
~~~~~~~~~~~

[source, bash]
----
pip install -e git+git://github.com/niwibe/django-pgjson#egg=django-pgjson
----

Setup
-----

No additional steps are required, just use a field.


Note to South users
~~~~~~~~~~~~~~~~~~~

If you keep getting errors like There is no South database module 'south.db.None'
for your database., add the following to settings.py:

[source, python]
----
SOUTH_DATABASE_ADAPTERS = {'default': 'south.db.postgresql_psycopg2'}
----

Usage
-----

The library provides these classes:

- `django_pgjson.fields.JsonField` +
  An ORM field which stores python dict in an json type column.
- `django_pgjson.fields.JsonBField` + Same as above, but using the new jsonb
  field in PostgreSQL >= 9.4. Experimental.

Configuration
~~~~~~~~~~~~~

- `PGJSON_ENCODER_CLASS` (default: `django.core.serializers.json.DjangoJSONEncoder`) +
  set this to a custom JSON encoder class to serialize additional data types.

Model setup
~~~~~~~~~~~

.Model definition is straightforward:
[source, python]
----
from django.db import models
from django_pgjson.fields import JsonField

class Something(models.Model):
    name = models.CharField(max_length=32)
    data = JsonField()  # can pass attributes like null, blank, ecc.
----

Now `data` attribute works like python standard dictionary.

WARNING: PostgreSQL json field also can store arrays and any json valid value
but, django_pgjson at this momment only handles python dict.


Querying
~~~~~~~~

Key or Index lookup
^^^^^^^^^^^^^^^^^^^

.If you are using django 1.7, you can use index or key lookup for filtering
[source, pycon]
----
>>> Something.object.bulk_create([
...     Something(data={"name": "foo"}),
...     Something(data={"name": "bar"})
... ])
>>> Something.objects.filter(data__at_name="foo").count()
1
----

.It also works for array indexes
[source, pycon]
----
>>> Something.object.bulk_create([
...     Something(data=[1,2,3,4]),
...     Something(data=[4,5,6,7])
... ])
>>> Something.objects.filter(data__at_0=4).count()
1
----

.Same example but using Django < 1.7
[source, pycon]
----
>>> Something.objects.extra(where=["data->>'name' = %s"], params=["foo"]).count()
1
----


Array length lookup
^^^^^^^^^^^^^^^^^^^

With same data as previous example:

.With Django >= 1.7
[source, pycon]
----
>>> Something.objects.filter(data__array_length=4).count()
2
----


.With Django < 1.7
[source, pycon]
----
>>> Something.objects.extra(where=["json_array_length(data) = %s"],
...                         params=["foo"]).count()
2
----


NOTE: At this momment, with postgresql 9.3 as last stable version there is only a
limited set of native operators for json type. When postgresql 9.4 is released,
more lookups will be added.

jsonb containment lookup
^^^^^^^^^^^^^^^^^^^^^^^^

If you are using django 1.7 and PostgreSQL >= 9.4, you can use the special jsonb
containment operator, which can be accelerated by a GiN index on the jsonb
field.

.Use the containment operator as follows:
[source, pycon]
----
>>> Something.object.bulk_create([
...     Something(data={"name": "foo", "tags": ["sad", "romantic"]}),
...     Something(data={"name": "bar", "tags": ["sad", "intelligent"]})
... ])
>>> Something.objects.filter(data__jcontains={"tags": ["sad"]}).count()
2
----

We will implement support for more of the jsonb operators in the near future.
See http://www.postgresql.org/docs/9.4/static/datatype-json.html for more
information on what's possible, and feel free to send a pull request.

Formatting JSON output
^^^^^^^^^^^^^^^^^^^^^^

To control the format of serialized JSON, you may define a `json_dump_args`
dict for a field.  Its contents will be passed as arguments to `json.dumps`.

----

    data = JsonField(json_dump_args={'indent': 2, 'sort_keys': True})
    
----

See https://docs.python.org/3/library/json.html#json.dumps
for accepted arguments.

Developers
----------

Running tests
~~~~~~~~~~~~~

Assuming one has the dependencies installed, and a PostgreSQL 9.0+ server up and running:

[source, bash]
----
python runtests.py
----


Documentation
~~~~~~~~~~~~~

The documentation is written using asciidoc and if you want build it
you should install the following dependencies: gnu make, asciidoc and pygments.

.Build documentation
[source,bash]
----
cd doc/
make
chromium index.html
----

.Deploy documentation
[source, bash]
----
./build-docs.sh
git push -u origin gh-pages
git checkout master
----


How to contribute
~~~~~~~~~~~~~~~~~

- Follow PEP8, Style Guide for Python Code
- Fork this repo
- Write code
- Write tests for your code
- Ensure all tests pass
- Document your changes
- Send pull request

Deprecation policy
~~~~~~~~~~~~~~~~~~

At any momment of time, django-pgjson developers will mantain support for two versions of django.
